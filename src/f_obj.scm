(define (string->numlist str)
  (map string->number (string-split str #\space)))

(define (parse-face str)
  (map (lambda (str)
	 (map (lambda (str) (unless (string-null? str)
			      (string->number str)))
	      str))
       (map (lambda (str) (string-split str #\/))
	    (string-split str #\space))))

(define (read-obj-lines file lst)
  (let ((line (read-line file)))
    (if (not (eof-object? line))
	(cond ((string-contains line "v " 0 2)
	       (read-obj-lines file (append (car lst) (string->numlist (substring line 2)))))
	      ((string-contains line "f " 0 2)
	       (read-obj-lines file (append (cdr lst) (string->numlist (substring line 2)))))
		(else (read-obj-lines file lst)))
	lst)))

(define (load-obj filename)
  (let ((fp (open-file filename "r")))
    (read-obj-lines fp (cons '() '()))))
